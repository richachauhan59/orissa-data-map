{"version":3,"sources":["data/data_mgnregs_odisha_2019-20_pc_expenditure.csv","App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","flag","setFlag","mData","d3","mainData","push","className","style","textAlign","MapContainer","height","width","border","zoom","center","TileLayer","attribution","url","GeoJSON","eventHandlers","click","fillColor","mapData","features","onEachFeature","region","layer","regionName","properties","pc_name","console","log","bindPopup","on","e","map","item","target","setStyle","color","fillOpacity","float","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k4+DAAe,MAA0B,uE,OCuI1BA,MA9Hf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEWF,oBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,KAIPC,EAAQ,GA4Cd,OA3CAC,IAAOC,GAAU,SAAUA,GACzBF,EAAMG,KAAKD,MA2CX,sBAAKE,UAAU,MAAf,UACE,oBAAIC,MAAO,CAAEC,UAAW,UAAxB,0FAIA,sBAAKF,UAAU,OAAf,UACE,8BACE,eAACG,EAAA,EAAD,CACEF,MAAO,CACLG,OAAQ,OACRC,MAAO,QACPC,OAAQ,mBAEVC,KAAM,EACNC,OAAQ,CAAC,GAAI,IAPf,UASE,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEN,cAACC,EAAA,EAAD,CACEC,cAAe,CACbC,MAAO,cAITb,MAlES,CACnBc,UAAW,OAkEDvB,KAAMwB,EAAQC,SACdC,cAhES,SAACC,EAAQC,GAC5B,IAAMC,EAAaF,EAAOG,WAAWC,QACrCC,QAAQC,MACRL,EAAMM,UAAUL,GAChBD,EAAMO,GAAG,SAAS,SAAUC,GAC1BhC,EAAMiC,KACJ,SAACC,GAAD,OACEA,EAAK,gCAAkCT,GACvCS,EAAK,gCAAkCT,EAAa,SACpDS,EAAK,gCAAkCT,EAAa,QAGhD5B,EAAQqC,GACR,QAGRnC,GAAQ,MAGVyB,EAAMO,GAAG,aAAa,SAAUC,GAE9BA,EAAEG,OAAOC,SAAS,CAChBC,MAAO,QACPC,YAAa,WAGjBd,EAAMO,GAAG,YAAY,SAAUC,GAE7BA,EAAEG,OAAOC,SAAS,CAChBC,MAAO,OACPC,YAAa,mBAsCb,qBAAKlC,UAAU,YAAYC,MAAO,CAAEkC,MAAO,SAA3C,SACGzC,EACC,8BACE,kCACE,+BACE,4DACA,6BAAKF,EAAK,mCAEZ,+BACE,iDACA,6BAAKA,EAAK,wBAEZ,+BACE,sDACA,6BAAKA,EAAK,6BAEZ,+BACE,4DACA,6BAAKA,EAAK,mCAEZ,+BACE,gEACA,6BAAKA,EAAK,uCAEZ,+BACE,yDACA,6BAAKA,EAAK,gCAEZ,+BACE,uDACA,6BAAKA,EAAK,8BAEZ,+BACE,mDACA,6BAAKA,EAAK,+BAId,cCpHC4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84b214d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/data_mgnregs_odisha_2019-20_pc_expenditure.78b1373c.csv\";","import React, { useEffect, useState } from \"react\";\n// import Map from './Map';\nimport mapData from \"./data/map.json\";\nimport { MapContainer, GeoJSON, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./App.css\";\nimport * as d3 from \"d3\";\nimport mainData from \"./data/data_mgnregs_odisha_2019-20_pc_expenditure.csv\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [flag, setFlag] = useState(false);\n\n  const mData = [];\n  d3.csv(mainData, function (mainData) {\n    mData.push(mainData);\n  });\n\n  const geojsonStyle = {\n    fillColor: \"red\",\n  };\n\n  const onEachRegion = (region, layer) => {\n    const regionName = region.properties.pc_name;\n    console.log();\n    layer.bindPopup(regionName);\n    layer.on(\"click\", function (e) {\n      mData.map(\n        (item) =>\n          item[\"Parliamentary Constituency\"] === regionName ||\n          item[\"Parliamentary Constituency\"] === regionName + \" (ST)\" ||\n          item[\"Parliamentary Constituency\"] === regionName + \" (SC)\"\n            ? //  item.OpeningBalance\n              // console.log( item[\"Total Fund Available\"], item[\"Parliamentary Constituency\"])\n              setData(item)\n            : null\n        // console.log( \"No Match\", item[\"ParliamentaryConstituency\"])\n      );\n      setFlag(true);\n    });\n\n    layer.on(\"mouseover\", function (e) {\n      // console.log(e, regionName, );\n      e.target.setStyle({\n        color: \"green\",\n        fillOpacity: \"0.6\",\n      });\n    });\n    layer.on(\"mouseout\", function (e) {\n      // console.log(e, regionName, );\n      e.target.setStyle({\n        color: \"blue\",\n        fillOpacity: \"0.2\",\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 style={{ textAlign: \"center\" }}>\n        Expenditures for MGNREGS in parliamentary constituencies of Odisha\n        (2019-20)\n      </h1>\n      <div className=\"Data\">\n        <div>\n          <MapContainer\n            style={{\n              height: \"80vh\",\n              width: \"134vh\",\n              border: \"black solid 2px\",\n            }}\n            zoom={7}\n            center={[20, 85]}\n          >\n            <TileLayer\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            <GeoJSON\n              eventHandlers={{\n                click: () => {\n                  <div>Richa</div>;\n                },\n              }}\n              style={geojsonStyle}\n              data={mapData.features}\n              onEachFeature={onEachRegion}\n            />\n          </MapContainer>\n        </div>\n        <div className=\"dataPanel\" style={{ float: \"right\" }}>\n          {flag ? (\n            <div>\n              <table>\n                <tr>\n                  <td>Parliamentary Constituency</td>\n                  <td>{data[\"Parliamentary Constituency\"]}</td>\n                </tr>\n                <tr>\n                  <td>Opening Balance</td>\n                  <td>{data[\"Opening Balance\"]}</td>\n                </tr>\n                <tr>\n                  <td>Total Fund Available</td>\n                  <td>{data[\"Total Fund Available\"]}</td>\n                </tr>\n                <tr>\n                  <td>Total Expenditure on Wages</td>\n                  <td>{data[\"Total Expenditure on Wages\"]}</td>\n                </tr>\n                <tr>\n                  <td>Total Expenditure on Materials</td>\n                  <td>{data[\"Total Expenditure on Materials\"]}</td>\n                </tr>\n                <tr>\n                  <td>Grand Total Expenditure</td>\n                  <td>{data[\"Grand Total Expenditure\"]}</td>\n                </tr>\n                <tr>\n                  <td>Total Unspent Balance</td>\n                  <td>{data[\"Total Unspent Balance\"]}</td>\n                </tr>\n                <tr>\n                  <td>Total Payment Due</td>\n                  <td>{data[\"Total Payment Due\"]}</td>\n                </tr>\n              </table>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}